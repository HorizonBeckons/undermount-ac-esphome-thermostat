## Written by https://github.com/anthonysecco
# Special thanks to Mike Goubeaux (SmartyVan)
# To be used with Undermount AC ESP Home Thermostat and Undermount AC System

# Output 1 - Blower Speed (White Wire)
# Output 2 - Blower Power On/Off (Brown Wire) 
# Output 3 - Low-Speed Compressor (Blue Wire)
# Output 4 - High-Speed Compressor (Green Wire)
# Output 5 - Unused
# Output 6 - Unused

# Substitutions
################################################################################
substitutions:
  device_name: undermount-ac
  friendly_name: "Undermount AC"

  # Be careful making changes to these values. 
  # Defaults are as follows
  # kp of '0.2' adds 20% blower speed for every 1C
  # ki of '0.000334' doubles the 'kp' speed over 10 minutes if error (actual temp - set temp) is 5C.
  # kd is '0.0' and not used.
  # For more details watch https://www.youtube.com/watch?v=dZ8lzDi3cXY
  
  kp: '0.2' # Proportional - Sets how much blower speed % to add for every degree.  1.0 is 100%.
  ki: '0.000334' # Integral - Sets how quickly to add to blower speed % if not reaching the target.
  kd: '0.0' # Derivative - Sets how quickly to dampen blower speed as it reaches target temp.

  # This limits integral contribution.  Integral contribution is multiplied by this number.
  integral_clamp_factor: '2.0' #Increase '0.25' increments every few days if your van has difficulty reaching the set temperature.

# Globals
################################################################################
globals:
  - id: integral
    type: float
  - id: previous_error
    type: float
  - id: last_time
    type: uint32_t
    initial_value: '0'
  - id: high_speed_start
    type: uint32_t
    initial_value: '0'
  - id: high_speed_stop
    type: uint32_t
    initial_value: '0'
  - id: high_speed_active
    type: bool
    initial_value: 'false'

# Board Configuration
################################################################################
esphome:
  name: ${device_name}
  friendly_name: ${friendly_name}
  on_boot:
    priority: -10
    then:
      - lambda: |-
          id(integral) = 0.0;
          id(previous_error) = 0.0;

esp32:
  board: esp32-s3-devkitc-1
  framework:
    type: arduino

# Connectivity
################################################################################
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  manual_ip:
    static_ip: 10.0.1.27
    gateway: 10.0.1.1
    subnet: 255.255.255.0
    dns1: 10.0.1.1
  output_power: 14db # 8.5db (lowest) and 20.5db (highest)
  ap: # Backup Access Point if Wi-Fi is unavailable
    ssid: "${friendly_name} Fallback AP"
    password: "12345678"

captive_portal:

# Core Services
################################################################################
logger:

api:

ota:
  - platform: esphome

# LEDs
################################################################################
light:
  # ESPHome status LED - controls an output (to use onboard RGB LED)
  - platform: status_led
    name: "status led"
    internal: true
    output: statusoutput
  
  # ESP32-S3 onboard RGB LED
  - platform: neopixelbus
    variant: WS2812
    pin: 48
    num_leds: 1
    name: "Status LED RGB"
    internal: True
    restore_mode: ALWAYS_OFF
    id: statusledlight
    icon: "mdi:led-outline"
    effects:
      - strobe:
          name: "Not Connected"
          colors:
            - state: True
              brightness: 50%
              red: 100%
              green: 0%
              blue: 0%
              duration: 1s
            - state: False
              duration: 1s
      - pulse:
          name: "Pulse"
          update_interval: 2s
          min_brightness: 40%
          max_brightness: 60%
      - pulse:
          name: "Pulse Fast"
          transition_length: 0.25s
          update_interval: 0.5s
          min_brightness: 40%
          max_brightness: 60%

# Sensors
################################################################################
i2c: # Bus for SHT30
  sda: GPIO21
  scl: GPIO14
  scan: true
  id: bus_a

sensor:
  - platform: sht3xd #SHT30 Temp/Humidity Sensor
    i2c_id: bus_a
    id: onboard_sht30
    temperature:
      name: "UndermountAC Temperature"
      id: onboard_temperature
    humidity:
      name: "UndermountAC Humidity"
      id: onboard_humidity
    update_interval: 30s

  - platform: template # Fan Speed Diagnostic Sensor
    id: fan_speed_called
    name: Blower Speed Called
    accuracy_decimals: 0
    unit_of_measurement: "%"
    device_class: ""
    entity_category: "diagnostic"
    icon: mdi:fan
    filters:
      # Simulate clamped fan speed values 
      - lambda: |- 
          if(id(blower_fan).state) {
            return ((x * .01) * (id(blower_speed).get_max_power() - id(blower_speed).get_min_power()) + id(blower_speed).get_min_power()) * 100;
          } else {
            return 0.0;
          }
    disabled_by_default: true

  # Uncomment sensors below for Wi-Fi Diagnostics
  #- platform: wifi_signal
  #  name: "WiFi Signal dB"
  #  id: wifi_signal_db
  #  update_interval: 60s
  #  entity_category: "diagnostic"
  #  disabled_by_default: True
  #  icon: "mdi:wifi"

  #- platform: copy
  #  source_id: wifi_signal_db
  #  name: "WiFi Signal Percent"
  #  filters:
  #    - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
  #  unit_of_measurement: "%"
  #  entity_category: "diagnostic"
  #  disabled_by_default: True
  #  icon: "mdi:wifi-strength-4"

binary_sensor:
  - platform: template
    name: "Blower Power Called"
    id: blower_power_called
    device_class: "power"
    entity_category: "diagnostic"
    icon: "mdi:toggle-switch"
    lambda: |-
      return id(blower_power).is_enabled();
    disabled_by_default: true

  - platform: template
    name: "Low-Speed Compressor Called"
    id: low_speed_compressor_called
    device_class: "power"
    entity_category: "diagnostic"
    icon: "mdi:toggle-switch"
    lambda: |-
      return id(compressor_speed_low).state;
    disabled_by_default: true

  - platform: template
    name: "High-Speed Compressor Called"
    id: high_speed_compressor_called
    device_class: "power"
    entity_category: "diagnostic"
    icon: "mdi:toggle-switch"
    lambda: |-
      return id(compressor_speed_high).state;
    disabled_by_default: true

#Outputs
################################################################################
output:
  - platform: template # ESPHome Status LED using ESP32-S3 Onboard Addressable LED
    id: statusoutput
    type: binary
    write_action:
      - if:
          condition:
             lambda: return state > 0;
          then:
            - light.turn_on: 
                id: statusledlight
                effect: "Not Connected"
          else:
            - light.turn_off: 
                id: statusledlight

  - platform: ledc # Output 1
    pin: 7
    id: blower_speed
    power_supply: blower_power
    frequency: 21500 Hz
    min_power: 0.50
    max_power: 0.98
    zero_means_zero: true

power_supply: 
  - id: blower_power # Output 2 
    pin: 
      number: 9
      inverted: true

fan:
  - platform: speed
    name: "Blower"
    output: blower_speed
    id: blower_fan
    on_turn_off:
      - lambda: id(fan_speed_called).publish_state(id(blower_fan).speed);
    on_speed_set:
      - lambda: id(fan_speed_called).publish_state(id(blower_fan).speed);
    disabled_by_default: true

switch:  
  - platform: gpio # Output 3
    id: compressor_speed_low
    pin:
      number: 8
      inverted: true
    restore_mode: ALWAYS_OFF
    internal: true

  - platform: gpio # Output 4
    id: compressor_speed_high
    pin:
      number: 10
      inverted: true
    internal: true
    restore_mode: ALWAYS_OFF
    disabled_by_default: true # User must manually enable compressor high speed in Home Assistant
    on_turn_on:
      - script.execute: status_light_update
    on_turn_off:
      - script.execute: status_light_update

  - platform: gpio # Output 5 - Unused
    pin: 20
    id: output_5
    name: Output 5
    disabled_by_default: true

  - platform: gpio # Output 6 - Unused
    pin: 19
    id: output_6
    name: Output 6
    disabled_by_default: true

  - platform: template # User can enable/disable the compressor
    id: high_speed_enabled
    name: Enabled High-speed Cooling
    icon: mdi:speedometer
    restore_mode: RESTORE_DEFAULT_OFF
    optimistic: true

# Climate
################################################################################
climate:
  - platform: thermostat
    name: "Air Conditioner"
    id: undermount_thermostat
    sensor: onboard_temperature
    visual:
      temperature_step: 1.0
      min_temperature: 65 째F
      max_temperature: 95 째F

    min_cooling_off_time: 2min  # 2min or greater per UndermountAC
    min_cooling_run_time: 2min  # 2min or greater per UndermountAC
    min_idle_time: 30s          # Sets minimum time thermostat remains in idle state.
    min_fanning_off_time: 30s   # Sets minimum time blower must remain off before it can be turned on again.
    min_fanning_run_time: 30s   # Sets minimum time blower must stay on once it has been activated.
    cool_deadband: 0.5 째C       # Reactivate cooling if this degree over set point
    cool_overrun: 1.0 째C        # Maintain cooling up to this degree below set point

    cool_action:
      - lambda: id(blower_speed).set_min_power(0.50); # Minimum 40% to prevent evaporator frost per UndermountAC
      - lambda: id(blower_speed).set_min_power(0.98);
      - switch.turn_on: compressor_speed_low
      - delay: 30s
      - fan.turn_on: blower_fan
    idle_action:
      - switch.turn_off: compressor_speed_low
      - switch.turn_off: compressor_speed_high
      - lambda: id(blower_speed).set_max_power(0.30); # Ramp down blower.
      - lambda: id(blower_speed).set_min_power(0.98);
      - delay: 30s # Delay blower turnoff to push out remaining cold air
      - fan.turn_off: blower_fan
    fan_only_action:
      - switch.turn_off: compressor_speed_low
      - switch.turn_off: compressor_speed_high
      - lambda: id(blower_speed).set_min_power(0.30);
      - lambda: id(blower_speed).set_min_power(0.98);
      - fan.turn_on: blower_fan
    off_mode:
      - switch.turn_off: compressor_speed_low
      - switch.turn_off: compressor_speed_high
      - delay: 30s # Delay blower turnoff to push out remaining cold air
      - fan.turn_off: blower_fan
    
    on_boot_restore_from: memory
    default_preset: Standby # If no memory, default to Standby.
    preset:
      - name: Home
        default_target_temperature_high: 75 째F
        fan_mode: AUTO
        mode: cool
      - name: Standby
        default_target_temperature_high: 75 째F
        fan_mode: AUTO
        mode: "OFF"
      - name: Sleep
        default_target_temperature_high: 72 째F
        fan_mode: AUTO
        mode: cool
    
    min_fan_mode_switching_time: 5s # Sets delay between blower speed changes.
    fan_only_cooling: true

    fan_mode_low_action:
      - logger.log: "Blower is LOW"
    fan_mode_medium_action:
      - logger.log: "Blower is MEDIUM"
    fan_mode_high_action:
      - logger.log: "Blower is HIGH"
    fan_mode_auto_action:
      - logger.log: "Blower is AUTO"

    on_state:
      - script.execute: update_blower_speed
      - script.execute: status_light_update
      - lambda: |-
          // Reset PID components when transitioning from OFF
          if (id(undermount_thermostat).mode == CLIMATE_MODE_OFF) {
              id(integral) = 0.0;
              id(previous_error) = 0.0;
          }   

# Scripts
################################################################################
script:
  - id: update_blower_speed
    then:
      - lambda: |-
          // Skip entire logic if climate mode is OFF
          if (id(undermount_thermostat).mode != CLIMATE_MODE_OFF) {

              // High-speed Compressor Settings
              const float high_speed_threshold = 75.0;          // Engage high-speed compressor at this underlying blowering speed
              const uint32_t min_high_speed_time = 120000;      // 2 min on-time
              const uint32_t min_high_speed_off_time = 120000;  // 2 min off-time

              // Time Management
              uint32_t now = millis();
              float dt = (id(last_time) == 0) ? 1.0 : (now - id(last_time)) / 1000.0;
              id(last_time) = now;

              int fan_speed = 0;  // Default fan speed

              // Manual Fan Modes
              if (id(undermount_thermostat).fan_mode == CLIMATE_FAN_LOW) {
                  fan_speed = 0;
                  id(blower_speed).set_min_power(0.50);
                  id(blower_speed).set_max_power(0.98);
                  ESP_LOGD("Fan Mode", "Manual: LOW - Fan Speed: %d", fan_speed);
              } else if (id(undermount_thermostat).fan_mode == CLIMATE_FAN_MEDIUM) {
                  fan_speed = 50;
                  id(blower_speed).set_min_power(0.50);
                  id(blower_speed).set_max_power(0.98);
                  ESP_LOGD("Fan Mode", "Manual: MEDIUM - Fan Speed: %d", fan_speed);
              } else if (id(undermount_thermostat).fan_mode == CLIMATE_FAN_HIGH) {
                  fan_speed = 100;
                  id(blower_speed).set_min_power(0.50);
                  id(blower_speed).set_max_power(0.98);
                  ESP_LOGD("Fan Mode", "Manual: HIGH - Fan Speed: %d", fan_speed);
              } 
              
              // Auto Fan Mode
              else if (id(undermount_thermostat).fan_mode == CLIMATE_FAN_AUTO) {
                  // PID Constants
                  const float Kp = ${kp};
                  const float Ki = ${ki};
                  const float Kd = ${kd};

                  // Temperature Error Calculation
                  float current_temp = id(undermount_thermostat).current_temperature;
                  float target_temp = id(undermount_thermostat).target_temperature;
                  float error = current_temp - target_temp;

                  // Calculate Proportional
                  float P = Kp * error;
                  id(integral) += error * dt;

                  // Calculate Integral
                  float integral_limit = fabs(${integral_clamp_factor} * P / Ki); // Clamp based on Proportional
                  id(integral) = fmax(-integral_limit, fmin(id(integral), integral_limit));
                  float I = Ki * id(integral);
                  
                  // Calculate Derivative
                  float derivative = (error - id(previous_error)) / dt;
                  float D = Kd * derivative;
                  id(previous_error) = error;

                  // Output Calculation
                  float output = fmax(0.0, fmin(1.0, P + I + D));
                  fan_speed = static_cast<int>(output * 100);
                  id(blower_speed).set_min_power(0.50);
                  id(blower_speed).set_max_power(0.98);
                  ESP_LOGI("PID", "AUTO Mode - Error: %.2f, P: %.2f, I: %.2f, D: %.2f, Output: %.2f, Fan Speed: %d", error, P, I, D, output, fan_speed);
              }

              // Fan Speed Command (Applies to both AUTO and Manual modes)
              auto call = id(blower_fan).make_call();
              call.set_speed(fan_speed);
              call.perform();

              // Debug log lines to ensure correct conditions
              ESP_LOGI("High-Speed Check", "Blower Fan Speed: %.2f%% (Threshold: %.2f%%)", id(fan_speed_called).state, high_speed_threshold);
              ESP_LOGI("High-Speed Check", "Climate Action: %s", 
                  (id(undermount_thermostat).action == CLIMATE_ACTION_COOLING) ? "COOLING" : "NOT COOLING");
              ESP_LOGI("High-Speed Check", "High-Speed Enabled: %s", id(high_speed_enabled).state ? "YES" : "NO");

              // High-Speed Compressor Control (Applies to both AUTO and Manual modes)
              if (id(fan_speed_called).state >= high_speed_threshold && 
                  id(undermount_thermostat).action == CLIMATE_ACTION_COOLING && 
                  id(high_speed_enabled).state) {
                  
                  // Check if compressor can be turned on
                  if (!id(high_speed_active) && (now - id(high_speed_stop) >= min_high_speed_off_time)) {
                      id(high_speed_active) = true;
                      id(high_speed_start) = now;
                      id(compressor_speed_high).turn_on();
                      ESP_LOGI("Compressor", "Switched to HIGH speed");
                  } 
                  // Maintain high-speed operation
                  else if (id(high_speed_active)) {
                      uint32_t elapsed_time = now - id(high_speed_start);
                      int duration = elapsed_time / 1000;  // Convert ms to seconds

                      // Ensure minimum ON time is maintained
                      if (elapsed_time < min_high_speed_time) {
                          int remaining_time = (min_high_speed_time - elapsed_time) / 1000;
                          ESP_LOGI("Compressor", "High-speed maintained for minimum duration - %d seconds remaining", remaining_time);
                      } else {
                          ESP_LOGI("Compressor", "High-speed running - %d seconds elapsed", duration);
                      }
                  }
              } 
              // Condition to turn off the high-speed compressor
              else if (id(high_speed_active) && 
                      ((id(blower_fan).state < high_speed_threshold) || !id(high_speed_enabled).state)) {
                  // Immediate turn-off if high-speed cooling is disabled or blower speed is below threshold
                  id(high_speed_active) = false;
                  id(high_speed_stop) = now;
                  id(compressor_speed_high).turn_off();
                  ESP_LOGI("Compressor", "Switched to LOW speed");
              }
          }

      - lambda: id(fan_speed_called).publish_state(id(blower_fan).speed);

  - id: status_light_update
    then:
      - if: # CLIMATE OFF - ORANGE
          condition:
            lambda: 'return id(undermount_thermostat).mode == CLIMATE_MODE_OFF;'
          then:
            - light.turn_on:
                id: statusledlight
                red: 50%
                green: 35%
                blue: 0%
                brightness: 30%
                effect: "None"
      - if: # CLIMATE IDLE - FAINT BLUE
          condition:
            lambda: 'return id(undermount_thermostat).action == CLIMATE_ACTION_IDLE;'
          then:
            - light.turn_on: 
                id: statusledlight
                red: 0%
                green: 0%
                blue: 100%
                brightness: 20%
                effect: "None"
      - if: # CLIMATE COOLING - PULSING BLUE
          condition:
            lambda: 'return id(undermount_thermostat).action == CLIMATE_ACTION_COOLING;'
          then:
            - if:
                condition:
                  switch.is_on: compressor_speed_high
                then:
                  - light.turn_on: 
                      id: statusledlight
                      red: 0%
                      green: 0%
                      blue: 100%
                      brightness: 40%
                      effect: "Pulse Fast"
                else:
                  - light.turn_on: 
                      id: statusledlight
                      red: 0%
                      green: 0%
                      blue: 100%
                      brightness: 40%
                      effect: "Pulse"
      - if: # CLIMATE FAN ONLY MODE - PULSING CYAN
          condition:
            lambda: 'return id(undermount_thermostat).mode == CLIMATE_MODE_FAN_ONLY;'
          then:
            - light.turn_on: 
                id: statusledlight
                red: 0%
                green: 100%
                blue: 100%
                brightness: 40%
                effect: "Pulse"  
